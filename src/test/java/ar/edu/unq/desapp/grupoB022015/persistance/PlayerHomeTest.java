package ar.edu.unq.desapp.grupoB022015.persistance;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;

import org.junit.Test;

import ar.edu.unq.desapp.grupoB022015.model.Id;
import ar.edu.unq.desapp.grupoB022015.model.Player;
import ar.edu.unq.desapp.grupoB022015.model.builders.PlayerBuilder;
import junit.framework.TestCase;
import persistence.PlayerHome;

public class PlayerHomeTest extends TestCase{

	@Test
	public void test_save(){
		Player aPlayer = PlayerBuilder.anyPlayer().build();
		PlayerHome.getInstance().save(aPlayer);
		
		assertTrue (PlayerHome.getInstance().all().size() == 1);
	}
	
	@Test
	public void test_existIdentifier(){
		// Ids are generated by the home in order from 0, i.e. first saved player's id = 0, second 1, etc
		PlayerHome.getInstance().reset();
		
		Player aPlayer = PlayerBuilder.anyPlayer().build();
		Player anotherPlayer = PlayerBuilder.anyPlayer().build();
		
		PlayerHome.getInstance().save(aPlayer);
		
		assertTrue (PlayerHome.getInstance().existIdentifier(new Id(0)));
		assertFalse (PlayerHome.getInstance().existIdentifier(new Id(1)));
		
		PlayerHome.getInstance().save(anotherPlayer);
		
		assertTrue (PlayerHome.getInstance().existIdentifier(new Id(1)));
	}
	
	@Test
	public void test_get(){
		PlayerHome.getInstance().reset();
		
		Player aPlayer = PlayerBuilder.anyPlayer().build();
		Player anotherPlayer = PlayerBuilder.anyPlayer().build();
		PlayerHome.getInstance().save(aPlayer);
		PlayerHome.getInstance().save(anotherPlayer);
		
		assertTrue(aPlayer.equals(PlayerHome.getInstance().get(new Id(0))));
		assertTrue(anotherPlayer.equals(PlayerHome.getInstance().get(new Id(1))));		
	}
	
	@Test
	public void test_bestPlayersInLastThreeRounds(){
		PlayerHome.getInstance().reset();
		
		Player p1 = mock(Player.class);
		Player p2 = mock(Player.class);
		Player p3 = mock(Player.class);
		Player p4 = mock(Player.class);
		
		when(p1.pointsInLastThreeRounds()).thenReturn(1);
		when(p2.pointsInLastThreeRounds()).thenReturn(2);
		when(p3.pointsInLastThreeRounds()).thenReturn(3);
		when(p4.pointsInLastThreeRounds()).thenReturn(4);
		
		PlayerHome.getInstance().save(p1);
		PlayerHome.getInstance().save(p2);
		PlayerHome.getInstance().save(p3);
		PlayerHome.getInstance().save(p4);
		
		List<Player> bestPlayers = PlayerHome.getInstance().bestPlayersInLastThreeRounds();
		
		// p1 should be the only one how isn't in the best player's list		
		assertFalse(bestPlayers.contains(p1));
		
		assertTrue(bestPlayers.contains(p2));
		assertTrue(bestPlayers.contains(p3));
		assertTrue(bestPlayers.contains(p4));
	}
}
